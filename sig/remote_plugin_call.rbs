# TypeProf 0.12.0

# Classes
class Plugin
  module RemotePluginCall
    type pluggalid_atomic = nil | String | Integer | Float | bool | Time | Plugin::RemotePluginCall::ProxyObject | Enumerable[untyped]

    def self.mrpc_param: (untyped arg) -> Mrpc::Param
    def self.mrpc_param_unbox: (Mrpc::Param box, ^(Plugin::RemotePluginCall::ProxyObject, Symbol) -> Mrpc::Param unbox_requester) -> pluggalid_atomic

    class FilteringRequester
      @receive: Enumerable[::Mrpc::FilteringPayload]
      @awaiting: Hash[Integer, Thread::Queue]

      attr_reader send_queue: Thread::Queue

      def initialize: (Enumerable[::Mrpc::FilteringPayload]) -> void
      def each_item: -> Enumerable[::Mrpc::FilteringRequest]
                   | () { (::Mrpc::FilteringRequest) -> void } -> Enumerable[::Mrpc::FilteringRequest]
      def receive_start: (::Mrpc::FilteringPayload::Start start) -> void
      def receive_response: (::Mrpc::FilterQuery response) -> void
      def receive_resolve: (::Mrpc::ProxyValue resolve) -> void
      def send_request: (name: String|Symbol, event_id: Integer, param: Enumerable[::Mrpc::Param]) -> Enumerable[pluggalid_atomic]
      def send_query: (subject: ::Mrpc::Proxy, selection: String) -> ::Mrpc::Param

      private

      def plugin: -> ::Plugin
    end

    class ProxyObject < BasicObject
      @unbox_requester: ^(Plugin::RemotePluginCall::ProxyObject, Symbol) -> Mrpc::Param
      @cache: Hash[Symbol, Mrpc::Param]

      attr_reader proxy: Mrpc::Proxy
      def initialize: (Mrpc::Proxy proxy, (^(Plugin::RemotePluginCall::ProxyObject, Symbol) -> Mrpc::Param) unbox_requester) -> void
      def method_missing: (Symbol message, *bot rest, **bot) -> Mrpc::Param?
    end

    class Server
      def query: (untyped q, untyped _call) -> untyped
               | (untyped q, untyped _call) -> untyped
      def subscribe: (untyped request, untyped _call) -> Enumerator[bot, bot]
                   | (untyped request, untyped _call) -> Enumerator[bot, bot]
      def filtering: (untyped request, untyped _call) -> Enumerator[bot, bot]
                   | (untyped request, untyped _call) -> Enumerator[bot, bot]
      def filtering_start: (untyped filter_name, Thread::Queue filter_response_queue, FilteringRequestSender sender) -> untyped
                         | (untyped filter_name, Thread::Queue filter_response_queue, FilteringRequestSender sender) -> untyped
    end
  end

  class Event
  end

  class EventFilter
  end

  class HandlerTag
  end

  def self.[]: (Symbol | String) -> Plugin
  def add_event: (Symbol | String) { (*bot rest) -> void } -> Event
  def add_event_filter: (Symbol | String event_name, ?tags: (HandlerTag | Enumerable[HandlerTag]), ?name: String) { (*pluggalid_atomic rest) -> Array[pluggalid_atomic] } -> EventFilter
  def handler_tag: -> HandlerTag
end

module Kernel
  def atomic: [T] () { () -> T } -> T
  def notice: (untyped) -> void
  def error: (untyped) -> void
end
